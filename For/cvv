https://swapi.py4e.com/api/people
const axios = require("axios");
const URL = `https://swapi.py4e.com/api/people`;

async function obterPessoas(nome) {
const url = `${URL}/?search=${nome}&format=json`;
const response = await axios.get(url);
return response.data;
}
obterPessoas("Luke")
.then(function (resultado) {
console.log("Resultado", resultado);
})
.catch(function (error) {
console.error("ERROR", error);
});
results.results.forEach(function (item) {
    names.push(item.name);
  });
///////////////////////////////////////////
const service = require("./Services");
Array.prototype.MeuMap = function (callback) {
  const novoArrayMapeado = [];
  for (indicide = 1; indicide <= this.length - 1; indicide++) {
    const NewMap = callback(this[indicide], indicide);
    novoArrayMapeado.push(NewMap);
  }
  return novoArrayMapeado;
};
async function main() {
  try {
    //Esse results esta pegando os dados do service
    const results = await service.obterPessoas("a");
    // //Aqui crio uma array vazia pra implemntar os nomes dentro dela
    // const names = [];
    // results.results.forEach(function (item) {
    //   //Esse name.push pega cada nome do array list
    //   names.push(item.name);
    // });
    // const names = results.results.map(function (pessoa) {
    //   return pessoa.name;
    // });
    // const names = results.results.map((pessoa) => pessoa.name);
    const names = results.results.MeuMap(function (pessoa, indicide) {
      return [`${indicide}:${pessoa.name}`];
    });
    console.log("names:", names);
  } catch (error) {
    console.error("error", error);
  }
}
main();
const assert = require("assert");
const { obterPessoas } = require("./Servidor");
const nock = require("nock");

describe("Star Wars tests", function () {
  this.beforeAll(() => {
    const response = {
      count: 1,
      next: null,
      previous: null,
      results: [
        {
          name: "R2-D2",
          height: "96",
          mass: "32",
          hair_color: "n/a",
          skin_color: "white, blue",
          eye_color: "red",
          birth_year: "33BBY",
          gender: "n/a",
          homeworld: "https://swapi.dev/api/planets/8/",
          vehicles: [],
          starships: [],
          created: "2014-12-10T15:11:50.376000Z",
          edited: "2014-12-20T21:17:50.311000Z",
          url: "https://swapi.dev/api/people/3/",
        },
      ],
    };

    nock("https://swapi.dev/api/people")
      .get("/?search=r2-d2&format=json")
      .reply(200, response);
  });

  it("deve buscar o r2-d2 com o formato correto", async () => {
    const expected = [
      {
        nome: "R2-D2",
        peso: "96",
        altura: "32",
      },
    ];
    const nomeBase = "r2-d2";
    const resultado = await obterPessoas(nomeBase);
    assert.deepEqual(resultado, expected);
  });
});
